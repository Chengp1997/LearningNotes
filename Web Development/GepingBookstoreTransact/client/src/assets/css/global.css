/* GOOGLE FONTS */
/*@import url("https://fonts.googleapis.com/css?family=Proza+Libre");*/
/*@import url("https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,400;0,700;1,400;1,700&display=swap");*/

/* CUSTOM PROPERTIES */

/*
  The :root selector matches the document's root element.
  In HTML, the root element is always html. By convention,
  custom properties are always defined in :root (not in html).
*/
:root {
    --title-font-family: "Proza Libre", serif;
    --default-font-family: "Roboto", sans-serif;
    /*
      16px is the default font size set by browsers in the html tag.
      This should never be changed so that vision-impared users can override it.
      Therefore, 1rem (root em) is the width of an em-dash at 16px.
      If you want a differnt default size for your site, change it in the body tag.
      For example, if you want 20px, then set the size to 20/16 = 1.25rem.
    */
    /*--default-font-size: 1.25rem;*/
    --default-text-color: #111;
    --neutral-color: #4e4e4e;
    --button-text-color: white;

    --primary-button-color: #68784b;
    --primary-button-color-hover: #384028;
    --primary-button-color-visited: #a2b876;
    --primary-background-color: rgb(229, 232, 221);
    --secondary-button-color: #bdaa21;
    --secondary-button-color-hover: #7d7017;
    --secondary-button-color-visited: #efd831;
    --secondary-background-color: #c7d4a3;
    --card-background-color: navajowhite;
    --navigation-background-color: rgb(218, 228, 187);
}

/* RESET */

/*
  In CSS, margins can be a pain to work with. One of the reasons for this
  is that top and bottom margins collapse into one another. For example,
  if you have one paragraph following another and they both have top
  and bottom margins of 1em, the space between them will be... 1em.
  It will not be 2em as you might think. To get around this odd behavior,
  many developers choose to set all margins on paragrph elements to 0
  and fix problems as they arise.
*/
h1,
h2,
h3,
p {
    margin: 0;
}

/* For large text sizes, you typically want to decrease your line height. */
h1,
h2,
h3 {
    font-family: var(--title-font-family);
    line-height: 1;
}

/* For small text sizes, you typically want to increase your line height. */
p {
    line-height: 1.5;
}

/* Get rid of styling (numbers, bullets, and spacing) for lists. */
ol,
ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

/*
  By default, a width refers to the width of the content box.
  This causes unexpected behavior in many situations. The following
  rull makes width refer to the width of the border box.
  See the box model (content/padding/border/margin) for details.
*/
* {
    box-sizing: border-box;
}

/*
  This rule ensures that all images stretch to fit the width
  of the parent element, and all images start on a new line.
  A height of auto will ensure the aspect ratio is preserved.
*/
img {
    max-width: 100%;
    height: auto;
    display: block;
}

/*
  In general, font properties of elements are inherited from
  the parent element, and layout properties of elements are NOT inherited
  from the parent element. An exception to this convention involves elements
  that are associated with forms (like button and input). This rule fixes
  that oversight in the CSS specification, and ensures that form elements
  also inherit font properties from their parent element.

  For details, see https://www.youtube.com/watch?v=qKiz9gdJdr8&t=49s.
*/
button,
input,
optgroup,
select,
textarea {
    color: inherit;
    font: inherit;
    margin: 5px;
}

/* UTILITY CLASSES */

/*
  When you get rid of margins, everything is crammed together. For example,
  paragraphs will have no space between them, which is NOT good design.
  The following utility class gives a top margin of 1.25rem (20px)
  to all children inside a parent with class .flow-content,
  EXCEPT for the first child, which will NOT get a margin.
  That's because "elem + elem" means that the rule should be applied
  to the first elem only when it is followed by another elem.
*/
.flow-content > * + * {
    margin-top: 1rem;
}

/*
  Giving various sections of your page this utility class
  will ensure a nice padding around the contents.
*/
.container {
    padding: 1rem;
}

/*
  Sometimes it's nice to have a section where the foreground
  and background colors are (more-or-less) flipped for contrast.
  This utility class does that.
*/
.dark-background {
    background-color: var(--neutral-color);
    color: whitesmoke;
}

/* BODY */

/* These global font properties with be inherited by child elements. */
body {
    /* font properties (inherited) */
    background: var(--primary-background-color);
    color: var(--default-text-color);
    font-family: var(--default-font-family);
    /*font-size: var(--default-font-size);*/

    /* layout properties (not inherited) */
    margin: 0 auto;
    /*max-width: 70rem;*/
    max-width: 1400px;
}

/* BUTTONS */

/*
  These rules gives simplistic styles for buttons inside and outside of forms.
  A richer web site will likely have multiple styles that are defined
  by multiple classes. At a minimum, you might have class .primary-button
  and .secondary-button.
*/

.button,
.button:visited {
    display: inline-block;
    background: var(--primary-button-color);
    color: var(--button-text-color);
    text-decoration: none;
    padding: 0.5em 1em;
    cursor: pointer;
    border-radius: 8px;
    border:0 none;
}

.button:hover {
    background: var(--primary-button-color-hover);
}
.button:active {
    background: var(--primary-button-color-visited);
    color: white;
}

/* LINKS */

/*
  Some developers choose to make links look like buttons. Technically,
  links are things you click on that take you to another page, and buttons
  are things you click on that perform some action (like adding a product
  to the shopping cart), but the line has become somewhat blurred.
*/

a, a:visited {
    /* properties here */
    color: var(--primary-button-color);
}

a:hover, a:active {
/* properties here */
    color: var(--primary-button-color);
}